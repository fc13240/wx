var xml = require("./node-xml");
var Node = function(){
	this.isClosed = false;
	this.nodeName = null;
	this.value = null;
	this.parent = null;
	this.childs = [];
}

Node.prototype.getJson = function(isMerge){
	var json = {text: this.value,attrs:this.attrs,child:null};
	var val;
	if(isMerge){
		var obj = {};
		this.childs.forEach(function(v,i){
			var new_v = obj[v.nodeName];
			var c_v = v.getJson(isMerge);
			if(v.nodeName in obj){
				if(!Array.isArray(new_v)){
					new_v = [new_v]
				}
				new_v.push(c_v[v.nodeName]);
				obj[v.nodeName] =  new_v;
			}else{
				obj[v.nodeName] =  c_v[v.nodeName];
			}
		});
		json.child = obj;
	}else{
		var arr = [];
		this.childs.forEach(function(v,i){
			arr.push(v.getJson());
		});
		json.child = arr;
	}
	//json[this.nodeName] = val;
	//json.child = val;
	var obj = {}
	obj[this.nodeName] = json;
	return obj;
}
Node.prototype.close = function(){
	if(!this.value){
		this.value = '';
	}
	this.isClosed = true;
}
function getParent(prevNode){
	if(prevNode.isClosed){
		var p = prevNode.parent;
		if(p.isClosed){
			return getParent(p);
		}else{
			return p;
		}
	}else{
		return prevNode;
	}
}
exports.parse2Json = function (xmlStr,callback,isMerge){
	this.parse2Node(xmlStr,function(err,node){
		if(err){
			callback && callback(err);
		}else{
			callback && node && callback(err,node.getJson(isMerge));
		}
	});
}
exports.parse2Node = function (xmlStr,callback){
	if(!xmlStr){
		callback && callback(new Error('xmlStr must be a String'));
		return;
	}
	var parser = new xml.SaxParser(function(cb){
		var currentNode = null;
		var lastNoCloseNode = null;
		var root ;
		cb.onStartDocument(function() {
			log('onStartDocument',arguments);
			//root = new Node();
		});
		cb.onEndDocument(function(){
			log('onEndDocument',arguments);
			callback && callback(null,root)
		});
		cb.onStartElementNS(function(elem, attrs, prefix, uri, namespaces) {
			log('onStartElementNS',arguments);
			var prevNode = currentNode;
			currentNode = new Node();
			currentNode.nodeName = elem;
			if(attrs){
				var _tempAttrs = {};
				for (var i = attrs.length - 1; i >= 0; i--) {
					var _arr = attrs[i];
					_tempAttrs[_arr[0]] = _arr[1];
				};
				currentNode.attrs = _tempAttrs;
			}
			
			if(!root){
				root = currentNode;
			}else{
				var parent = getParent(prevNode);
				currentNode.parent = parent;
				parent.childs.push(currentNode);
			}
		});
		cb.onEndElementNS(function(elem, prefix, uri) {
			if(currentNode.isClosed){//当前元素关闭的，把currentNode的指针指向其父元素
				currentNode = currentNode.parent;
			}
			currentNode.close();
			
			log('onEndElementNS',arguments);
		});
		cb.onCharacters(function(chars) {
			log('onCharacters',arguments);
	    	currentNode.value = chars;
		});
		cb.onCdata(function(cdata) {
			log('onCdata',arguments);
			currentNode.value = cdata;
		});
		cb.onError(function(err){
			log('onError',arguments);
			callback && callback(err)
		});
	});
	parser.parseString(xmlStr.replace(/[\r\n]/g,''));
}
var log = function(){
	//console.log.apply(console,[].slice.call(arguments));
}
if(process.argv[1] == __filename){
	log = function(){
		//console.log.apply(console,[].slice.call(arguments));
	}
	var str = '<xml>'+
		'<ToUserName><![CDATA[toUser]]></ToUserName>'+
		'<FromUserName><![CDATA[fromUser]]></FromUserName>'+
		'<CreateTime>1351776360</CreateTime>'+
		'<MsgType><![CDATA[link]]></MsgType>'+
		'<Title><![CDATA[公众平台官网链接]]></Title>'+
		'<Description><![CDATA[公众平台官网链接]]></Description>'+
		'<Url><![CDATA[url]]></Url>'+
		'<MsgId>1234567890123456</MsgId>'+
		'<MsgId>12345</MsgId>'+
		'</xml> '
	str = '<xml><ToUserName><![CDATA[gh_8f47ec7c055d]]></ToUserName>'+
			'<FromUserName><![CDATA[o7fAGj-j4y-Ey5nvTTE1Z9wwyCY4]]></FromUserName>'+
			'<CreateTime>1362986469</CreateTime>'+
			'<MsgType><![CDATA[text]]></MsgType>'+
			'<Content><![CDATA[A]]></Content>'+
			'<MsgId>5853982309245517843</MsgId>'+
			'<MsgId><test>test</test></MsgId>'+
			'</xml>';
	str = '<div><a target="_blank" href="/tag/2415">test<img src="1.jpg"/></a><a target="_blank" href="/tag/2415">test<img src="1.jpg"/></a></div>';
	str = '<div><a target="_blank" href="/tag/2415">test>test</a><div class="left"><div class="link"></div></div><div class="right"><div class="link"></div><div class="link"></div></div></div>';
	exports.parse2Json(str,function(err,json){
				console.log(JSON.stringify(err||json));
				//console.log('===',json.xml.child);
			},true);
}

