var xml = require("./node-xml");
var Node = function(){
	this.isClosed = false;
	this.nodeName = null;
	this.value = null;
	this.parent = null;
	this.childs = [];
}

Node.prototype.getJson = function(isMerge){
	var json = {};
	var val = this.value;
	if(val != '' && !val) {
		if(isMerge){
			var obj = {};
			this.childs.forEach(function(v,i){
				var new_v = obj[v.nodeName];
				var c_v = v.getJson();
				if(v.nodeName in obj){
					if(!Array.isArray(new_v)){
						new_v = [new_v]
					}
					new_v.push(c_v[v.nodeName]);
					obj[v.nodeName] =  new_v;
				}else{
					obj[v.nodeName] =  c_v[v.nodeName];
				}
			});
			val = obj;
		}else{
			var arr = [];
			this.childs.forEach(function(v,i){
				arr.push(v.getJson());
			});
			val = arr;
		}
	}
	json[this.nodeName] = val;
	return json;
}
Node.prototype.close = function(){
	if(!this.value){
		this.value = '';
	}
	this.isClosed = true;
}
exports.parse2Json = function (xmlStr,callback,isMerge){
	this.parse2Node(xmlStr,function(err,node){
		callback && callback(err,node.getJson(),isMerge);
	});
}
exports.parse2Node = function (xmlStr,callback){
	var parser = new xml.SaxParser(function(cb){
		var currentNode = null;
		var lastNoCloseNode = null;
		var root ;
		cb.onStartDocument(function() {
			//root = new Node();
		});
		cb.onEndDocument(function(){
			callback && callback(null,root)
		});
		cb.onStartElementNS(function(elem, attrs, prefix, uri, namespaces) {
			var prevNode = currentNode;
			currentNode = new Node();
			currentNode.nodeName = elem;
			if(!root){
				root = currentNode;
			}else{
				var parent = prevNode.isClosed?prevNode.parent:prevNode;
				currentNode.parent = parent;
				parent.childs.push(currentNode);
			}
		});
		cb.onEndElementNS(function(elem, prefix, uri) {
			currentNode.close();
		});
		cb.onCharacters(function(chars) {
	    	currentNode.value = chars;
		});
		cb.onCdata(function(cdata) {
			currentNode.value = cdata;
		});
		cb.onError(function(err){
			callback && callback(err)
		});
	});
	parser.parseString(xmlStr);
}
if(process.argv[1] == __filename){
	exports.parse2Json('<xml>'+
		'<ToUserName><![CDATA[toUser]]></ToUserName>'+
		'<FromUserName><![CDATA[fromUser]]></FromUserName>'+
		'<CreateTime>1351776360</CreateTime>'+
		'<MsgType><![CDATA[link]]></MsgType>'+
		'<Title><![CDATA[公众平台官网链接]]></Title>'+
		'<Description><![CDATA[公众平台官网链接]]></Description>'+
		'<Url><![CDATA[url]]></Url>'+
		'<MsgId>1234567890123456</MsgId>'+
		'<MsgId>12345</MsgId>'+
		'</xml> ',function(err,json){
				console.log(JSON.stringify(json));
			});
}

